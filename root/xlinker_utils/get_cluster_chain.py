import os

from pecos.utils.cluster_util import ClusterChain
from pecos.xmc import Indexer, LabelEmbeddingFactory
from pecos.utils import smat_util


"""
    Generate a Hierarchical label tree that corresponds to the component
    semantic label indexing in the PECOS-EL model.

    Parameters
    ----------
    X : lst of str
        Parsed training instances
    X_feat : csr_matrix
        Training feature matrix. Training instances features generated by the TF-IDF model.
    Y : csr_matrix
        The label matrix including the labels associated with training instances.
    method : str
        The method to use for clustering: PIFA (Positive Instance Feature
        Aggregation) or PIFA + LF (Label Representation via Label Features
        in addition to PIFA).
    cluster_chain_filepath : str
        The path to save the cluster chain.
    Z_filepath : str
        The path to the external label embeddings.

    Returns
    -------
    cluster_chain : class representing a hierarchical clustering as a list of CSC matrices

"""
def get_cluster_chain( X=None, X_feat=None, Y=None, method="", cluster_chain_filepath="", Z_filepath="" ):
    if os.path.exists(cluster_chain_filepath):
        cluster_chain = ClusterChain.load(cluster_chain_filepath)

    else:
        #Generate a new cluster chain

        if method == "pifa":
            #PIFA: Positive Instance Feature Aggregation
            label_feat = LabelEmbeddingFactory.create(
                Y=Y, X=X_feat, method="pifa", threads=30, normalized_Y=True
            )

        elif method == "pifa_lf":
            # METHOD: PIFA + LF ->  Create label embedding by
            # concatenating pifa embeddings and provided existing
            # label embedding generated externally.

            # # Load external KB/Label features/embeddings
            Z_feat = smat_util.load_matrix(Z_filepath)
            print(label_feat.shape)
            print(X_feat.shape, Y.shape, Z_feat.shape)

            label_feat = LabelEmbeddingFactory.create(
                Y=Y,
                X=X_feat,
                Z=Z_feat.toarray(),
                method="pifa_lf_concat",
                threads=30,
                normalized_Y=True,
            )

        cluster_chain = Indexer.gen(label_feat)
        cluster_chain.save(cluster_chain_filepath)

    return cluster_chain